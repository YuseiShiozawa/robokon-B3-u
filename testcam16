import cv2
import numpy as np
import math

# カメラの設定 デバイスIDは0
cap = cv2.VideoCapture(0)

# フレームレートの設定
cap.set(cv2.CAP_PROP_FPS, 30)

# 各変数の初期値設定
count = 0
max_count = 30
red_point_interval = 35  # 白い点の間隔（ピクセル）を50に変更
red_point_radius = 5  # 白い点の半径（ピクセル）
red_line_width = 40  # 黒線の幅（ピクセル）
blue_point_x = 100
blue_point_y = 60

# ウィンドウの名前設定
cv2.namedWindow('video image', cv2.WINDOW_NORMAL)

# ウィンドウフレームのサイズ調整
cv2.resizeWindow('video image', 85, 60)

while True:
    # カメラからの画像取得
    ret, img = cap.read()

    height, width, _ = img.shape

    img = img[height//2:, :]
    red_point_x = width // 2

    # 画像処理：グレースケール変換
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # 黒線の検出
    _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    # 黒線の輪郭を見つける
    contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        area = cv2.contourArea(contour)

        if area > 100:

            # 黒線の輪郭を描画
            cv2.drawContours(img, [contour], -1, (0, 0, 255), 2)

            # 黒線の中心を計算
            M = cv2.moments(contour)
            if M["m00"] != 0:
                cx = int(M["m10"] / M["m00"])
                cy = int(M["m01"] / M["m00"])
             # 白点を描画
                cv2.circle(img, (cx, cy), red_point_radius, (255, 255, 255), -1)

                # 青い点を描画tensettei
                cv2.circle(img, (blue_point_x, blue_point_y), red_point_radius, (0, 255, 0), -1)

                # 赤点と白点の距離を計算
                distance = (cx - red_point_x) * -1

                # 赤点と白点の距離を描画
                font = cv2.FONT_HERSHEY_SIMPLEX
                cv2.putText(img, f"Distance: {distance}", (10, 40), font, 1, (0, 255, 0), 2, cv2.LINE_AA)

                # 青い点の座標と黒線の座標が重なる場合、点の色を緑に変更
                if blue_point_y >= 0 and blue_point_y < img.shape[0] and blue_point_x >= 0 and blue_point_x < img.shape[1]:
                    if binary[blue_point_y, blue_point_x] == 0:
                        cv2.circle(img, (blue_point_x, blue_point_y), red_point_radius, (255, 0, 0), -1)

    # 赤点の描画
    cv2.circle(img, (red_point_x, cy), red_point_radius, (0, 0, 255), -1)

    # カメラの画像の出力
    cv2.imshow('video image', img)

    # 繰り返し分から抜けるためのif文
    key = cv2.waitKey(1)
    if key == 27:
        break

# メモリを解放して終了するためのコマンド
cap.release()
cv2.destroyAllWindows()

